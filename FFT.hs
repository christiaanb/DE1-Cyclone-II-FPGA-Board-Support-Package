{-# LANGUAGE TemplateHaskell, Arrows #-}
module FFT where

import CLasH.HardwareTypes
import DE1Types
import Utils

type Word = Signed D18
type DWord = Signed D36
type CWord = (Word, Word)
type FPConst = (Word, Word)
type CFPConst = (FPConst, FPConst)
type Binaddr = Unsigned D7
type Samplnr = Unsigned D8

data Switch = Straight | Crossed deriving (Eq,Show)

invert :: Switch -> Switch
invert sw = if sw == Straight
            then Crossed
            else Straight

cadd :: CWord -> CWord -> CWord
cadd (ar,ai) (br,bi) = ( rout, iout )
  where routi = ((resizeSigned ar) + (resizeSigned br))  :: (Signed D19)
        iouti = ((resizeSigned ai) + (resizeSigned bi)) :: (Signed D19)
        ( rout, iout ) = (resizeSigned (routi `shiftR` 1), resizeSigned (iouti `shiftR` 1) )

csub :: CWord -> CWord -> CWord
csub (ar,ai) (br,bi) = ( rout, iout )
  where routi = ((resizeSigned ar) - (resizeSigned br)) :: (Signed D19)
        iouti = ((resizeSigned ai) - (resizeSigned bi)) :: (Signed D19)
        ( rout, iout ) = (resizeSigned (routi `shiftR` 1), resizeSigned (iouti `shiftR` 1) )

cmult :: CWord -> CFPConst -> CWord
cmult (r1, i1) (r2, i2) = ( (fpmult r1 r2) - (fpmult i1 i2), (fpmult r1 i2) + (fpmult i1 r2) )

fpmult :: Word -> FPConst -> Word
fpmult i (cf,cs) = o
  where vi = (resizeSigned i) :: DWord
        vc = (resizeSigned cf) :: DWord
        o = (resizeSigned (shiftR (vi * vc) ((resizeSigned cs) :: DWord ))) :: Word

fpbfly :: (CWord, CWord) -> CFPConst -> (CWord, CWord)
fpbfly (xt, xb) twfact = (yt, yb)
  where xbw = cmult xb twfact
        (yt, yb) = (cadd xt xbw, csub xt xbw)


butterfly (State (twfactors, cntrmax, cntr)) (valid, int, inb) = (State (twfactors, cntrmax, cntrn), (valid, outt, outb))
  where (outt, outb) = fpbfly (int, inb) (twfactors ! cntr) -- first find the intermedia output values
        cntrn = if valid
                then
                  if cntr == cntrmax
                  then 0
                  else cntr + 1
                else cntr

commutator (State (fifol, fifor, cntrmax, sw, cntr)) (valid, int, inb) = (State (fifoln, fiforn, cntrmax, swn, cntrn), (valid, outt, outb))
  where (outt, outb) = (vlast fifor, swob )
        (swot, swob) = if sw == Straight
                       then (int, vlast fifol)
                       else (vlast fifol, int)
        (fifoln, fiforn) = if valid
                           then (inb +>> fifol, swot +>> fifor)
                           else (fifol, fifor)
        swn = if (cntr == cntrmax) && valid
              then invert sw
              else sw
        cntrn = if valid
                then
                  if cntr == cntrmax
                  then 0
                  else cntr + 1
                else cntr

-- The last stage of the FFT pipeline: this stages calculates the magnitude squared and generates the addresses correcsponding to the freq bin number
magsqrdaddr :: (State (Samplnr, Bool)) -> (Bool, CWord, CWord) -> (State (Samplnr, Bool), (Word, Binaddr, Bool))
magsqrdaddr (State (cntr, initDone)) (valid, int, _) = (State (cntrn, initDonen), (res, addr, binvalid))
  where a = (resizeSigned (fst int)) :: DWord
        b = (resizeSigned (snd int)) :: DWord
        cntrn = if valid
                then cntr + 1
                else cntr
        (addr, binvalid) = if valid && (cntr <= 127) && initDone
                           then (bitrev (resizeUnsigned cntr), True)
                           else (0, False)
        initDonen = if (initDone == False) && (cntr <= 127)
                    then False
                    else True
        res = resizeSigned (shiftR (a*a + b*b) 18)

-- Sample the valid signal 
valsampler :: (State Bit) -> (Word, Bit) -> (State Bit, (Bool, CWord, CWord))
valsampler (State svalid) (datain, validin) = (State svalidn, (outvalid, outt, outb))
  where (outt, outb) = ((datain,0), (0,0))
        outvalid = (hwand (hwnot svalid) validin) == High
        svalidn = validin

-- The register on the output
outreg :: (State (Word, Binaddr, Bool)) -> (Word, Binaddr, Bool) -> (State (Word, Binaddr, Bool), (Word, Binaddr, Bool))
outreg (State (sdata, saddr, svalid))  (datain, addrin, validin) = (State (sdatan, saddrn, svalidn), (dataout, addrout, validout))
  where (sdatan, saddrn, svalidn) = (datain, addrin, validin)
        (dataout, addrout, validout) = (sdata, saddr, svalid)
         
-- Initial state of stage 0
s0twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)) :: CFPConst  ])
s0butterflyL = comp butterfly (s0twfactors, 127, 0 :: Index D128) fftClock

s0fiflinitst, s0fifrinitst :: Vector D128 CWord
(s0fiflinitst,s0fifrinitst) = (vcopy (0,0), vcopy (0,0))
s0commutatorL = comp commutator (s0fiflinitst, s0fifrinitst, 127 :: Unsigned D7, Straight, 0 :: Unsigned D7) fftClock

-- Initial state of stage 1
s1twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)) :: CFPConst  ])
s1butterflyL = comp butterfly (s1twfactors, 127, 64 :: Index D128) fftClock

s1fiflinitst, s1fifrinitst :: Vector D64 CWord
(s1fiflinitst,s1fifrinitst) = (vcopy (0,0), vcopy (0,0))
s1commutatorL = comp commutator (s1fiflinitst, s1fifrinitst, 63 :: Unsigned D6, Straight, 0 :: Unsigned D6) fftClock

-- Initial state of stage 2
s2twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)) :: CFPConst  ])
s2butterflyL = comp butterfly (s2twfactors, 127, 32 :: Index D128) fftClock

s2fiflinitst, s2fifrinitst :: Vector D32 CWord
(s2fiflinitst, s2fifrinitst) = (vcopy (0,0), vcopy (0,0))
s2commutatorL = comp commutator (s2fiflinitst, s2fifrinitst, 31 :: Unsigned D5, Straight, 0 :: Unsigned D5) fftClock

-- Initial state of stage 3
s3twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)) :: CFPConst  ])
s3butterflyL = comp butterfly (s3twfactors, 127, 16 :: Index D128) fftClock

s3fiflinitst, s3fifrinitst :: Vector D16 CWord
(s3fiflinitst, s3fifrinitst) = (vcopy (0,0), vcopy (0,0))
s3commutatorL = comp commutator (s3fiflinitst, s3fifrinitst, 15 :: Unsigned D4, Straight, 0 :: Unsigned D4) fftClock

-- Initial state of stage 4
s4twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)) :: CFPConst  ])
s4butterflyL = comp butterfly (s4twfactors, 127, 8 :: Index D128) fftClock

s4fiflinitst, s4fifrinitst :: Vector D8 CWord
(s4fiflinitst, s4fifrinitst) = (vcopy (0,0), vcopy (0,0))
s4commutatorL = comp commutator (s4fiflinitst, s4fifrinitst, 7 :: Unsigned D3, Straight, 0 :: Unsigned D3) fftClock

-- Initial state of stage 5
s5twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((0,17),(-1,0)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((130441,17),(-12847,17)),((130441,17),(-12847,17)),((130441,17),(-12847,17)),((130441,17),(-12847,17)),((-12847,17),(-130441,17)),((-12847,17),(-130441,17)),((-12847,17),(-130441,17)),((-12847,17),(-130441,17)),((83151,17),(-101320,17)),((83151,17),(-101320,17)),((83151,17),(-101320,17)),((83151,17),(-101320,17)),((-101320,17),(-83151,17)),((-101320,17),(-83151,17)),((-101320,17),(-83151,17)),((-101320,17),(-83151,17)),((115595,17),(-61787,17)),((115595,17),(-61787,17)),((115595,17),(-61787,17)),((115595,17),(-61787,17)),((-61787,17),(-115595,17)),((-61787,17),(-115595,17)),((-61787,17),(-115595,17)),((-61787,17),(-115595,17)),((38048,17),(-125428,17)),((38048,17),(-125428,17)),((38048,17),(-125428,17)),((38048,17),(-125428,17)),((-125428,17),(-38048,17)),((-125428,17),(-38048,17)),((-125428,17),(-38048,17)),((-125428,17),(-38048,17)),((125428,17),(-38048,17)),((125428,17),(-38048,17)),((125428,17),(-38048,17)),((125428,17),(-38048,17)),((-38048,17),(-125428,17)),((-38048,17),(-125428,17)),((-38048,17),(-125428,17)),((-38048,17),(-125428,17)),((61787,17),(-115595,17)),((61787,17),(-115595,17)),((61787,17),(-115595,17)),((61787,17),(-115595,17)),((-115595,17),(-61787,17)),((-115595,17),(-61787,17)),((-115595,17),(-61787,17)),((-115595,17),(-61787,17)),((101320,17),(-83151,17)),((101320,17),(-83151,17)),((101320,17),(-83151,17)),((101320,17),(-83151,17)),((-83151,17),(-101320,17)),((-83151,17),(-101320,17)),((-83151,17),(-101320,17)),((-83151,17),(-101320,17)),((12847,17),(-130441,17)),((12847,17),(-130441,17)),((12847,17),(-130441,17)),((12847,17),(-130441,17)),((-130441,17),(-12847,17)),((-130441,17),(-12847,17)),((-130441,17),(-12847,17)),((-130441,17),(-12847,17)) :: CFPConst  ])
s5butterflyL = comp butterfly (s5twfactors, 127, 4 :: Index D128) fftClock

s5fiflinitst, s5fifrinitst :: Vector D4 CWord
(s5fiflinitst, s5fifrinitst) = (vcopy (0,0), vcopy (0,0))
s5commutatorL = comp commutator (s5fiflinitst, s5fifrinitst, 3 :: Unsigned D2, Straight, 0 :: Unsigned D2) fftClock

-- Initial state of stage 6
s6twfactors = $(vTH [
  ((1,0),(0,17)),((1,0),(0,17)),((0,17),(-1,0)),((0,17),(-1,0)),((92682,17),(-92682,17)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((-92682,17),(-92682,17)),((121095,17),(-50159,17)),((121095,17),(-50159,17)),((-50159,17),(-121095,17)),((-50159,17),(-121095,17)),((50159,17),(-121095,17)),((50159,17),(-121095,17)),((-121095,17),(-50159,17)),((-121095,17),(-50159,17)),((128553,17),(-25571,17)),((128553,17),(-25571,17)),((-25571,17),(-128553,17)),((-25571,17),(-128553,17)),((72820,17),(-108982,17)),((72820,17),(-108982,17)),((-108982,17),(-72820,17)),((-108982,17),(-72820,17)),((108982,17),(-72820,17)),((108982,17),(-72820,17)),((-72820,17),(-108982,17)),((-72820,17),(-108982,17)),((25571,17),(-128553,17)),((25571,17),(-128553,17)),((-128553,17),(-25571,17)),((-128553,17),(-25571,17)),((130441,17),(-12847,17)),((130441,17),(-12847,17)),((-12847,17),(-130441,17)),((-12847,17),(-130441,17)),((83151,17),(-101320,17)),((83151,17),(-101320,17)),((-101320,17),(-83151,17)),((-101320,17),(-83151,17)),((115595,17),(-61787,17)),((115595,17),(-61787,17)),((-61787,17),(-115595,17)),((-61787,17),(-115595,17)),((38048,17),(-125428,17)),((38048,17),(-125428,17)),((-125428,17),(-38048,17)),((-125428,17),(-38048,17)),((125428,17),(-38048,17)),((125428,17),(-38048,17)),((-38048,17),(-125428,17)),((-38048,17),(-125428,17)),((61787,17),(-115595,17)),((61787,17),(-115595,17)),((-115595,17),(-61787,17)),((-115595,17),(-61787,17)),((101320,17),(-83151,17)),((101320,17),(-83151,17)),((-83151,17),(-101320,17)),((-83151,17),(-101320,17)),((12847,17),(-130441,17)),((12847,17),(-130441,17)),((-130441,17),(-12847,17)),((-130441,17),(-12847,17)),((130914,17),(-6431,17)),((130914,17),(-6431,17)),((-6431,17),(-130914,17)),((-6431,17),(-130914,17)),((88023,17),(-97118,17)),((88023,17),(-97118,17)),((-97118,17),(-88023,17)),((-97118,17),(-88023,17)),((118488,17),(-56041,17)),((118488,17),(-56041,17)),((-56041,17),(-118488,17)),((-56041,17),(-118488,17)),((44157,17),(-123410,17)),((44157,17),(-123410,17)),((-123410,17),(-44157,17)),((-123410,17),(-44157,17)),((127144,17),(-31848,17)),((127144,17),(-31848,17)),((-31848,17),(-127144,17)),((-31848,17),(-127144,17)),((67384,17),(-112424,17)),((67384,17),(-112424,17)),((-112424,17),(-67384,17)),((-112424,17),(-67384,17)),((105278,17),(-78079,17)),((105278,17),(-78079,17)),((-78079,17),(-105278,17)),((-78079,17),(-105278,17)),((19232,17),(-129653,17)),((19232,17),(-129653,17)),((-129653,17),(-19232,17)),((-129653,17),(-19232,17)),((129653,17),(-19232,17)),((129653,17),(-19232,17)),((-19232,17),(-129653,17)),((-19232,17),(-129653,17)),((78079,17),(-105278,17)),((78079,17),(-105278,17)),((-105278,17),(-78079,17)),((-105278,17),(-78079,17)),((112424,17),(-67384,17)),((112424,17),(-67384,17)),((-67384,17),(-112424,17)),((-67384,17),(-112424,17)),((31848,17),(-127144,17)),((31848,17),(-127144,17)),((-127144,17),(-31848,17)),((-127144,17),(-31848,17)),((123410,17),(-44157,17)),((123410,17),(-44157,17)),((-44157,17),(-123410,17)),((-44157,17),(-123410,17)),((56041,17),(-118488,17)),((56041,17),(-118488,17)),((-118488,17),(-56041,17)),((-118488,17),(-56041,17)),((97118,17),(-88023,17)),((97118,17),(-88023,17)),((-88023,17),(-97118,17)),((-88023,17),(-97118,17)),((6431,17),(-130914,17)),((6431,17),(-130914,17)),((-130914,17),(-6431,17)),((-130914,17),(-6431,17)) :: CFPConst  ])
s6butterflyL = comp butterfly (s6twfactors, 127, 2 :: Index D128) fftClock

s6fiflinitst, s6fifrinitst :: Vector D2 CWord
(s6fiflinitst, s6fifrinitst) = (vcopy (0,0), vcopy (0,0))
s6commutatorL = comp commutator (s6fiflinitst, s6fifrinitst, 1 :: Unsigned D1, Straight, 0 :: Unsigned D1) fftClock

-- Initial state of stage 7
s7twfactors = $(vTH [
  ((1,0),(0,17)),((0,17),(-1,0)),((92682,17),(-92682,17)),((-92682,17),(-92682,17)),((121095,17),(-50159,17)),((-50159,17),(-121095,17)),((50159,17),(-121095,17)),((-121095,17),(-50159,17)),((128553,17),(-25571,17)),((-25571,17),(-128553,17)),((72820,17),(-108982,17)),((-108982,17),(-72820,17)),((108982,17),(-72820,17)),((-72820,17),(-108982,17)),((25571,17),(-128553,17)),((-128553,17),(-25571,17)),((130441,17),(-12847,17)),((-12847,17),(-130441,17)),((83151,17),(-101320,17)),((-101320,17),(-83151,17)),((115595,17),(-61787,17)),((-61787,17),(-115595,17)),((38048,17),(-125428,17)),((-125428,17),(-38048,17)),((125428,17),(-38048,17)),((-38048,17),(-125428,17)),((61787,17),(-115595,17)),((-115595,17),(-61787,17)),((101320,17),(-83151,17)),((-83151,17),(-101320,17)),((12847,17),(-130441,17)),((-130441,17),(-12847,17)),((130914,17),(-6431,17)),((-6431,17),(-130914,17)),((88023,17),(-97118,17)),((-97118,17),(-88023,17)),((118488,17),(-56041,17)),((-56041,17),(-118488,17)),((44157,17),(-123410,17)),((-123410,17),(-44157,17)),((127144,17),(-31848,17)),((-31848,17),(-127144,17)),((67384,17),(-112424,17)),((-112424,17),(-67384,17)),((105278,17),(-78079,17)),((-78079,17),(-105278,17)),((19232,17),(-129653,17)),((-129653,17),(-19232,17)),((129653,17),(-19232,17)),((-19232,17),(-129653,17)),((78079,17),(-105278,17)),((-105278,17),(-78079,17)),((112424,17),(-67384,17)),((-67384,17),(-112424,17)),((31848,17),(-127144,17)),((-127144,17),(-31848,17)),((123410,17),(-44157,17)),((-44157,17),(-123410,17)),((56041,17),(-118488,17)),((-118488,17),(-56041,17)),((97118,17),(-88023,17)),((-88023,17),(-97118,17)),((6431,17),(-130914,17)),((-130914,17),(-6431,17)),((131033,17),(-3217,17)),((-3217,17),(-131033,17)),((90379,17),(-94929,17)),((-94929,17),(-90379,17)),((119827,17),(-53116,17)),((-53116,17),(-119827,17)),((47172,17),(-122289,17)),((-122289,17),(-47172,17)),((127887,17),(-28718,17)),((-28718,17),(-127887,17)),((70123,17),(-110737,17)),((-110737,17),(-70123,17)),((107162,17),(-75472,17)),((-75472,17),(-107162,17)),((22408,17),(-129142,17)),((-129142,17),(-22408,17)),((130086,17),(-16045,17)),((-16045,17),(-130086,17)),((80640,17),(-103330,17)),((-103330,17),(-80640,17)),((114044,17),(-64605,17)),((-64605,17),(-114044,17)),((34959,17),(-126324,17)),((-126324,17),(-34959,17)),((124457,17),(-41115,17)),((-41115,17),(-124457,17)),((58931,17),(-117077,17)),((-117077,17),(-58931,17)),((99249,17),(-85613,17)),((-85613,17),(-99249,17)),((9642,17),(-130717,17)),((-130717,17),(-9642,17)),((130717,17),(-9642,17)),((-9642,17),(-130717,17)),((85613,17),(-99249,17)),((-99249,17),(-85613,17)),((117077,17),(-58931,17)),((-58931,17),(-117077,17)),((41115,17),(-124457,17)),((-124457,17),(-41115,17)),((126324,17),(-34959,17)),((-34959,17),(-126324,17)),((64605,17),(-114044,17)),((-114044,17),(-64605,17)),((103330,17),(-80640,17)),((-80640,17),(-103330,17)),((16045,17),(-130086,17)),((-130086,17),(-16045,17)),((129142,17),(-22408,17)),((-22408,17),(-129142,17)),((75472,17),(-107162,17)),((-107162,17),(-75472,17)),((110737,17),(-70123,17)),((-70123,17),(-110737,17)),((28718,17),(-127887,17)),((-127887,17),(-28718,17)),((122289,17),(-47172,17)),((-47172,17),(-122289,17)),((53116,17),(-119827,17)),((-119827,17),(-53116,17)),((94929,17),(-90379,17)),((-90379,17),(-94929,17)),((3217,17),(-131033,17)),((-131033,17),(-3217,17)) :: CFPConst  ])
s7butterflyL = comp butterfly (s7twfactors, 127, 1 :: Index D128) fftClock

s7fiflinitst, s7fifrinitst :: Vector D1 CWord
(s7fiflinitst, s7fifrinitst) = (vcopy (0,0), vcopy (0,0))
s7commutatorL = comp commutator (s7fiflinitst, s7fifrinitst, 0 :: Unsigned D1, Straight, 0 :: Unsigned D1) fftClock

-- The last stage performs the calculation of the magnitude squared
slastL = comp magsqrdaddr (1, False) fftClock

-- The first stage synchronises with the rising edge of the valid bitrev
sfirstL = comp valsampler Low fftClock

-- The output register
soutregL = comp outreg (0, 0, False) fftClock

-- Arrows for the different stages
fftstage0 = s0commutatorL >>> s0butterflyL
fftstage1 = s1commutatorL >>> s1butterflyL
fftstage2 = s2commutatorL >>> s2butterflyL
fftstage3 = s3commutatorL >>> s3butterflyL
fftstage4 = s4commutatorL >>> s4butterflyL
fftstage5 = s5commutatorL >>> s5butterflyL
fftstage6 = s6commutatorL >>> s6butterflyL
fftstage7 = s7commutatorL >>> s7butterflyL

fftfull = sfirstL >>> fftstage0 >>> fftstage1 >>> fftstage2 >>> fftstage3 >>> fftstage4 >>> fftstage5 >>> fftstage6 >>> fftstage7 >>> slastL >>> soutregL

fftsync :: Comp (Word, Bit) (Word, Binaddr, Bool)
fftsync = proc (lAdcData,pulseAdc48KHz) -> do
  audData <- comp synchronize fftAudDataInit fftClock -< (lAdcData, pulseAdc48KHz)
  outp    <- fftfull                                  -< audData
  returnA -< outp

fftAudDataInit :: Vector D2 (Word, Bit)
fftAudDataInit = vcopy (0,Low)

-- inpdata = replicate 256 131071
-- inpdata = concat (replicate 16 [999, 1535, 935, 123, 65000, 7535, 99, 3535, 1234, 5678, 12456, 123, 4949, 999, 99, 88])
inpdata = [ 101045, 100304, 111242, 75510, 85769, 84298, 14724, 51099, 92211, 66622, 104094, 30355, 21005, 123961, 3642, 66384, 32100, 122072, 112964, 58386, 97506, 52491, 22307, 102318, 97077, 121504, 56821, 610, 98446, 5055, 74480, 37977, 24558, 71319, 88769, 19137, 119594, 89359, 110949, 78757, 49199, 41724, 129264, 99120, 46945, 125471, 370, 97851, 7250, 104789, 30374, 71650, 79960, 34286, 101080, 22130, 35129, 55189, 68612, 26290, 93184, 118547, 103119, 64823, 110825, 48659, 2260, 8350, 89631, 73258, 57234, 37053, 50489, 43904, 21199, 6529, 110058, 23691, 65562, 7324, 51569, 87936, 43330, 67397, 6987, 85002, 107563, 37057, 111116, 129836, 22662, 68604, 26723, 73145, 25498, 41781, 12935, 30800, 58309, 42623, 93074, 97131, 60914, 56363, 96757, 15723, 104993, 22774, 49948, 66899, 28533, 79600, 114124, 93292, 63224, 77445, 81035, 126059, 42384, 63728, 49774, 41442, 50697, 99033, 33632, 90993, 57920, 87790, 119209, 74579, 95047, 49132, 44091, 65733, 80020, 57946, 24868, 92487, 53039, 73900, 82190, 130769, 38849, 42119, 129952, 112443, 22227, 104718, 92923, 98611, 129232, 23164, 42252, 94314, 49769, 84504, 25569, 694, 91684, 85132, 66348, 39820, 2257, 52889, 9720, 18722, 8463, 88381, 89765, 54463, 45648, 29375, 44029, 96941, 120876, 68718, 86353, 102881, 109267, 116576, 59671, 113203, 111189, 106318, 54457, 101957, 26771, 122276, 3609, 38632, 127947, 77748, 124486, 44417, 74673, 81938, 76085, 82262, 82509, 4587, 9203, 20639, 31772, 63337, 47376, 96566, 57477, 63392, 41184, 123639, 55041, 19579, 79071, 124468, 130298, 31959, 10393, 14973, 124640, 20754, 120465, 102060, 43938, 115813, 20639, 111798, 25831, 107623, 89526, 40244, 44655, 16009, 86932, 89372, 99306, 39271, 92675, 4954, 12478, 81237, 82636, 109445, 89779, 36145, 12312, 125163, 10403, 86711, 30145, 116245, 4533, 32151, 4860, 85157, 104535, 26135 ]
inpdata2 = concat (map (\a -> [(a, Low), (a, Low), (a, Low), (a, High), (a, High), (a, High), (a, High)]) (inpdata ++ inpdata))
inpdata3 = inpdata2

testfft = simulate fftfull inpdata3

outpwithaddr = take 128 (filter  (\(_,_,b) -> b) testfft)
res = bitreverse (map (\(v,_,_) -> v) outpwithaddr)

-- Stuff to test the results
evens :: [a] -> [a]
evens (x1:x2:xs) = x1 : evens xs
evens [] = []

odds :: [a] -> [a]
odds (x1:x2:xs) = x2 : odds xs
odds [] = []

bitreverse :: [a] -> [a]
bitreverse [x] = [x]
bitreverse lst = bitreverse (evens lst) ++ bitreverse (odds lst)

-- A not so elegant way of performing the bitreversal
bitrev :: Binaddr -> Binaddr
bitrev val = valr
  where b0 = ((val `shiftL` 0 ) `shiftR` 6) `shiftL` 0
        b1 = ((val `shiftL` 1 ) `shiftR` 6) `shiftL` 1
        b2 = ((val `shiftL` 2 ) `shiftR` 6) `shiftL` 2
        b3 = ((val `shiftL` 3 ) `shiftR` 6) `shiftL` 3
        b4 = ((val `shiftL` 4 ) `shiftR` 6) `shiftL` 4
        b5 = ((val `shiftL` 5 ) `shiftR` 6) `shiftL` 5
        b6 = ((val `shiftL` 6 ) `shiftR` 6) `shiftL` 6
        valr = b0 + b1 + b2 + b3 + b4 + b5 + b6
